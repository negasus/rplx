// Code generated by MockGen. DO NOT EDIT.
// Source: message.pb.go

// Package test is a generated GoMock package.
package rplx

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockReplicatorClient is a mock of ReplicatorClient interface
type MockReplicatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockReplicatorClientMockRecorder
}

// MockReplicatorClientMockRecorder is the mock recorder for MockReplicatorClient
type MockReplicatorClientMockRecorder struct {
	mock *MockReplicatorClient
}

// NewMockReplicatorClient creates a new mock instance
func NewMockReplicatorClient(ctrl *gomock.Controller) *MockReplicatorClient {
	mock := &MockReplicatorClient{ctrl: ctrl}
	mock.recorder = &MockReplicatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReplicatorClient) EXPECT() *MockReplicatorClientMockRecorder {
	return m.recorder
}

// Hello mocks base method
func (m *MockReplicatorClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hello", varargs...)
	ret0, _ := ret[0].(*HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello
func (mr *MockReplicatorClientMockRecorder) Hello(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockReplicatorClient)(nil).Hello), varargs...)
}

// Sync mocks base method
func (m *MockReplicatorClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync", varargs...)
	ret0, _ := ret[0].(*SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync
func (mr *MockReplicatorClientMockRecorder) Sync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockReplicatorClient)(nil).Sync), varargs...)
}

// MockReplicatorServer is a mock of ReplicatorServer interface
type MockReplicatorServer struct {
	ctrl     *gomock.Controller
	recorder *MockReplicatorServerMockRecorder
}

// MockReplicatorServerMockRecorder is the mock recorder for MockReplicatorServer
type MockReplicatorServerMockRecorder struct {
	mock *MockReplicatorServer
}

// NewMockReplicatorServer creates a new mock instance
func NewMockReplicatorServer(ctrl *gomock.Controller) *MockReplicatorServer {
	mock := &MockReplicatorServer{ctrl: ctrl}
	mock.recorder = &MockReplicatorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReplicatorServer) EXPECT() *MockReplicatorServerMockRecorder {
	return m.recorder
}

// Hello mocks base method
func (m *MockReplicatorServer) Hello(arg0 context.Context, arg1 *HelloRequest) (*HelloResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", arg0, arg1)
	ret0, _ := ret[0].(*HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello
func (mr *MockReplicatorServerMockRecorder) Hello(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockReplicatorServer)(nil).Hello), arg0, arg1)
}

// Sync mocks base method
func (m *MockReplicatorServer) Sync(arg0 context.Context, arg1 *SyncRequest) (*SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(*SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync
func (mr *MockReplicatorServerMockRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockReplicatorServer)(nil).Sync), arg0, arg1)
}
